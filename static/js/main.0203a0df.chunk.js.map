{"version":3,"sources":["logo.svg","components/HeaderComponent.js","classification/dates.js","classification/hypertension.js","data/hypertensionData.js","components/HypertensionComponent.js","screens/HypertensionScreen.js","screens/KidneyDiseaseScreen.js","screens/navigation/history.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HeaderComponent","className","href","getToday","moment","toISOString","substr","replace","getClassification","sysBp","diaBp","getClassificationString","classification","classify","date","bloodPressure","classifyLatest","classificationData","data","latest","length","reduce","prev","current","atDate","SysBP","DiaBP","getSampleData","HypertensionComponent","props","state","handleClick","e","newClassification","classificationString","console","log","setState","classificationResults","handleSysBpChange","target","value","handleDiaBpChange","getClassificationHighlight","includes","this","readonly","onChange","JSON","stringify","onClick","Component","HypertensionScreen","KidneyDiseaseScreen","HISTORY","createBrowserHistory","App","history","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0203a0df.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\n\nconst HeaderComponent = () => {\n    return <header className=\"header-container\">\n        <h1 className=\"header-heading\">Disease Classifier</h1>\n        <nav className=\"header-nav\">\n            <li className=\"nav-item\"><a href=\"#/\">Hypertension</a></li>\n            <li className=\"nav-item\"><a href=\"#/kidney-disease\">Kidney Disease</a></li>\n        </nav>\n    </header>;\n}\nexport default HeaderComponent;","import moment from \"moment\";\n\nconst DATE_FORMAT = 'YYYY/MM/DD.';\nconst getLast = (data) => {\n    if (!data || data.length === 0) {\n        return false;\n    }\n    return data.reduce((prev, current) => (moment(prev.atDate, DATE_FORMAT) > moment(current.atDate, DATE_FORMAT)) ? prev : current);\n\n};\n\nconst getToday = () => {\n    return new moment().toISOString().substr(0,10).replace(/-/g, '/');\n}\nexport {getLast, getToday}","import {getLast} from \"./dates\";\n\nconst getClassification = (sysBp, diaBp) => {\n    // If SysBP is Greater than or Equal to 180 AND DiaBP Greater than or Equal to 120\n    // Classification: “Stage 3”.\n    if (sysBp >= 180 && diaBp >= 120) {\n        return 3;\n    }\n    // If SysBP is between 160 (inclusive) and 180 (exclusive) OR DiaBP is between 100 (inclusive) and\n    // 110 (exclusive)\n    // Classification: “Stage 2”\n    if ((sysBp >= 160 && sysBp < 180) || (diaBp >= 100 && diaBp < 110)) {\n        return 2;\n    }\n\n    // If SysBP is between 140 (inclusive) and 160 (exclusive) OR DiaBP is between 90 (inclusive) and 100\n    // (exclusive)\n    // Classification: “Stage 1”\n    if ((sysBp >= 140 && sysBp < 160) || (diaBp >= 90 && diaBp < 100)) {\n        return 1;\n    }\n\n    //Todo: Not listed but after some searching this should either be Stage 2 or Unclassified\n    if ((sysBp < 140) && (diaBp >= 110 )) {\n        return -1\n    }\n\n    return 0;\n};\n\nconst getClassificationString = (classification) => {\n    if (classification === 3) {\n        return \"Stage 3\";\n    }\n    if (classification === 2) {\n        return \"Stage 2\";\n    }\n    if (classification === 1) {\n        return \"Stage 1\";\n    }\n    if (classification === -1) {\n        return \"Unclassified: Possibly Stage 2 please manually verify\";\n    }\n    return \"No Hypertension\";\n};\n\nconst classify = (sysBp, diaBp, date) => {\n    const bloodPressure = `${sysBp}/${diaBp}`;\n    const classification = getClassification(sysBp, diaBp);\n    return {\n        bloodPressure: bloodPressure,\n        date: date,\n        sysBp: sysBp,\n        diaBp: diaBp,\n        classification: getClassificationString(classification)\n    }\n}\n\nconst classifyLatest = (classificationData) => {\n    const latest = getLast(classificationData);\n    const date = latest.atDate;\n    return classify(latest.SysBP, latest.DiaBP, date)\n};\nexport {getClassification, getClassificationString, classify, classifyLatest} ;","const getSampleData = () => {\n    return [\n        {SysBP: 120, DiaBP: 90, atDate: '2018/10/31'},\n        {SysBP: 115, DiaBP: 100, atDate: '2018/10/20'}\n    ];\n\n};\n\nexport default getSampleData;","import React, {Component} from 'react';\nimport {getClassification, classifyLatest, getClassificationString, classify} from \"../classification/hypertension\";\nimport getSampleData from \"../data/hypertensionData\";\nimport {getToday} from \"../classification/dates\";\n\nconst prettyPrint = (data) => {\n    const jsonData = JSON.stringify(data);\n\n    return jsonData\n        .replace(/,/g, '\\n')\n        .replace(/:/g, ': ')\n        .replace(/\"/g, '')\n        .replace(/{/g, '')\n        .replace(/}/g, '');\n};\n\nclass HypertensionComponent extends Component {\n\n    state = {};\n\n    constructor(props) {\n        super(props);\n        const data = getSampleData();\n        const classificationResults = classifyLatest(data);\n        this.state = {\n            sysBp: classificationResults.sysBp,\n            diaBp: classificationResults.diaBp,\n            classificationResults: classificationResults,\n            date: getToday()\n        }\n    }\n\n    handleClick = (e) => {\n        const newClassification = getClassification(this.state.sysBp, this.state.diaBp);\n        const classificationString = getClassificationString(newClassification);\n        console.log('newClassification', newClassification);\n        console.log('classificationString', classificationString);\n        this.setState({\n            classificationResults: classify(this.state.sysBp, this.state.diaBp, this.state.date),\n            classification: classificationString\n        })\n    };\n\n\n    handleSysBpChange = (e) => {\n        this.setState({sysBp: e.target.value});\n    };\n\n    handleDiaBpChange = (e) => {\n        this.setState({diaBp: e.target.value});\n    };\n\n    getClassificationHighlight = (classification) => {\n        console.log('classificatoin', classification);\n        if (classification === \"Stage 1\") {\n            return \"blue\";\n        }\n        if (classification === \"Stage 2\") {\n            return \"yellow\";\n        }\n        if (classification === \"Stage 3\") {\n            return \"red\";\n        }\n        if (classification.includes(\"Unclassified\")) {\n            return \"unknown\";\n        }\n        return \"\";\n    };\n\n    render() {\n\n        return <div className=\"hypertension-results-container\">\n            <div className=\"hypertension-input\">\n                <label>Date:</label><input className=\"date-input\" value={this.state.classificationResults.date || this.state.date} readonly/>\n            </div>\n            <div className=\"hypertension-input\">\n                <label>Systolic Pressure:</label><input className=\"sys-bp-input\" value={this.state.sysBp}\n                                                        onChange={this.handleSysBpChange}/>\n            </div>\n            <div className=\"hypertension-input\">\n                <label>Diastolic Pressure:</label><input className=\"dia-bp-input\" value={this.state.diaBp}\n                                                         onChange={this.handleDiaBpChange}/>\n            </div>\n            <div className=\"hypertension-input\">\n                <label>Classification:</label><input readonly\n                                                     className={`classification-input ${this.getClassificationHighlight(this.state.classificationResults.classification)}`}\n                                                     value={this.state.classificationResults.classification}/>\n            </div>\n            <div className=\"hypertension-input\">\n                <textarea className=\"summaray-text-area\" value={prettyPrint(this.state.classificationResults)}/>\n            </div>\n            <button className=\"hypertension-classify-button\" readonly onClick={this.handleClick}>Classify</button>\n        </div>;\n    }\n\n\n}\n\nexport default HypertensionComponent;","import React, {Component} from 'react';\nimport HeaderComponent from \"../components/HeaderComponent\";\nimport HypertensionComponent from \"../components/HypertensionComponent\";\n\nclass HypertensionScreen extends Component {\n\n    render() {\n        return <div className=\"list-container\">\n            <HeaderComponent/>\n            <HypertensionComponent/>\n        </div>;\n    }\n\n}\n\nexport default HypertensionScreen;\n\n","import React, {Component} from 'react';\nimport HeaderComponent from \"../components/HeaderComponent\";\n\nclass KidneyDiseaseScreen extends Component {\n\n    render() {\n        return <div className=\"list-container\">\n            <HeaderComponent/>\n            KidneyDisease Screen\n        </div>;\n    }\n\n}\n\nexport default KidneyDiseaseScreen;\n\n","import {createBrowserHistory} from \"history\";\n\nconst HISTORY = createBrowserHistory();\n\nexport default HISTORY;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport HypertensionScreen from \"./screens/HypertensionScreen\";\nimport KidneyDiseaseScreen from \"./screens/KidneyDiseaseScreen\";\nimport {Component} from 'react';\nimport {Route, HashRouter as Router} from 'react-router-dom';\nimport HISTORY  from \"./screens/navigation/history\";\nclass App extends Component {\n\n  render() {\n\n    return (\n          <Router history={HISTORY}>\n            <Route exact={true} path=\"/\"component={HypertensionScreen}/>\n            <Route path=\"/kidney-disease\" component={KidneyDiseaseScreen}/>\n          </Router>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}