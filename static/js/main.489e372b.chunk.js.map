{"version":3,"sources":["logo.svg","components/HeaderComponent.js","classification/dates.js","classification/hypertension.js","data/hypertensionData.js","components/uiHelpers.js","components/HypertensionComponent.js","screens/HypertensionScreen.js","data/eGFRData.js","classification/kidneyDisease.js","components/KidneyDiseaseComponent.js","screens/KidneyDiseaseScreen.js","screens/navigation/history.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HeaderComponent","className","href","getToday","moment","toISOString","substr","replace","getClassification","sysBp","diaBp","getClassificationString","classification","classify","date","bloodPressure","classifyLatest","classificationData","data","latest","length","reduce","prev","current","atDate","SysBP","DiaBP","getSampleData","prettyPrint","JSON","stringify","getClassificationHighlight","includes","HypertensionComponent","props","state","handleClick","e","newClassification","classificationString","setState","classificationResults","handleSysBpChange","target","value","handleDiaBpChange","this","readOnly","onChange","onClick","Component","HypertensionScreen","getExtendedEgfrData","eGFR","getPercentageChange","percentageChange","parseFloat","toFixed","Infinity","sortByDate","unsorted","sort","a","b","diff","getDataWithPercentageChanged","sortedData","percentageChanges","percentageDifference","map","reading","index","push","change","getPercentageChanges","combined","getCriticalData","first","drops","percentage","combinedData","filteredData","Math","abs","initialReading","latestReading","getDataWithCriticalPercentageChanged","KidneyDiseaseComponent","handleEgfrChange","handlePreviousEgfrChange","newPrevious","previous","KidneyDiseaseScreen","HISTORY","createBrowserHistory","App","history","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.489e372b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\n\nconst HeaderComponent = () => {\n    return <header className=\"header-container\">\n        <h1 className=\"header-heading\">Disease Classifier</h1>\n        <nav className=\"header-nav\">\n            <li className=\"nav-item\"><a href=\"#/\">Hypertension</a></li>\n            <li className=\"nav-item\"><a href=\"#/kidney-disease\">Kidney Disease</a></li>\n        </nav>\n    </header>;\n}\nexport default HeaderComponent;","import moment from \"moment\";\n\nconst DATE_FORMAT = 'YYYY/MM/DD.';\nconst getLast = (data) => {\n    if (!data || data.length === 0) {\n        return false;\n    }\n    return data.reduce((prev, current) => (moment(prev.atDate, DATE_FORMAT) > moment(current.atDate, DATE_FORMAT)) ? prev : current);\n\n};\n\nconst getToday = () => {\n    return new moment().toISOString().substr(0, 10).replace(/-/g, '/');\n};\nexport {getLast, getToday}","import {getLast} from \"./dates\";\n\nconst getClassification = (sysBp, diaBp) => {\n    // If SysBP is Greater than or Equal to 180 AND DiaBP Greater than or Equal to 120\n    // Classification: “Stage 3”.\n    if (sysBp >= 180 && diaBp >= 120) {\n        return 3;\n    }\n    // If SysBP is between 160 (inclusive) and 180 (exclusive) OR DiaBP is between 100 (inclusive) and 110 (exclusive)\n    // Classification: “Stage 2”\n    if ((sysBp >= 160 && sysBp < 180) || (diaBp >= 100 && diaBp < 110)) {\n        return 2;\n    }\n\n    // If SysBP is between 140 (inclusive) and 160 (exclusive) OR DiaBP is between 90 (inclusive) and 100 (exclusive)\n    // Classification: “Stage 1”\n    if ((sysBp >= 140 && sysBp < 160) || (diaBp >= 90 && diaBp < 100)) {\n        return 1;\n    }\n\n    //Todo: Not listed but after some searching this should either be Stage 2 or Unclassified\n    if ((diaBp >= 110)) {\n        return -1\n    }\n\n    return 0;\n};\n\nconst getClassificationString = (classification) => {\n    if (classification === 3) {\n        return \"Stage 3\";\n    }\n    if (classification === 2) {\n        return \"Stage 2\";\n    }\n    if (classification === 1) {\n        return \"Stage 1\";\n    }\n    if (classification === -1) {\n        return \"Unclassified: Possibly Stage 2 please manually verify\";\n    }\n    return \"No Hypertension\";\n};\n\nconst classify = (sysBp, diaBp, date) => {\n    const bloodPressure = `${sysBp}/${diaBp}`;\n    const classification = getClassification(sysBp, diaBp);\n    return {\n        bloodPressure: bloodPressure,\n        date: date,\n        sysBp: sysBp,\n        diaBp: diaBp,\n        classification: getClassificationString(classification)\n    }\n};\n\nconst classifyLatest = (classificationData) => {\n    const latest = getLast(classificationData);\n    const date = latest.atDate;\n    return classify(latest.SysBP, latest.DiaBP, date)\n};\nexport {getClassification, getClassificationString, classify, classifyLatest} ;","const getSampleData = () => {\n    return [\n        {SysBP: 120, DiaBP: 90, atDate: '2018/10/31'},\n        {SysBP: 115, DiaBP: 100, atDate: '2018/10/20'}\n    ];\n};\n\nexport default getSampleData;","const prettyPrint = (data) => {\n    const jsonData = JSON.stringify(data);\n\n    return jsonData\n        .replace(/\\[/g, '')\n        .replace(/\\]/g, '')\n        .replace(/,/g, '\\n')\n        .replace(/:/g, ': ')\n        .replace(/\"/g, '')\n        .replace(/{/g, '')\n        .replace(/}}/g, '\\n- - - - - - - - - - - - - - - - - - \\n')\n        .replace(/}/g, '\\n');\n};\n\nconst getClassificationHighlight = (classification) => {\n    if (classification === \"Stage 1\") {\n        return \"blue\";\n    }\n    if (classification === \"Stage 2\") {\n        return \"yellow\";\n    }\n    if (classification === \"Stage 3\") {\n        return \"red\";\n    }\n    if (classification.includes(\"Unclassified\")) {\n        return \"unknown\";\n    }\n    if (classification === \"Mildly Decreased\") {\n        return \"yellow\";\n    }\n    if (classification === \"Mild to Moderate\") {\n        return \"orange\";\n    }\n    if (classification === \"Moderate to Severe\") {\n        return \"orange-red\";\n    }\n    if (classification === \"Severely Decreased\") {\n        return \"red\";\n    }\n    if (classification === \"Kidney Failure\") {\n        return \"black\";\n    }\n    if (classification.includes(\"Unclassified\")) {\n        return \"unknown\";\n    }\n    return \"\";\n};\n\nexport {prettyPrint, getClassificationHighlight};","import React, {Component} from 'react';\nimport {getClassification, classifyLatest, getClassificationString, classify} from \"../classification/hypertension\";\nimport getSampleData from \"../data/hypertensionData\";\nimport {getToday} from \"../classification/dates\";\nimport {prettyPrint, getClassificationHighlight} from \"./uiHelpers\";\n\nclass HypertensionComponent extends Component {\n\n    state = {};\n\n    constructor(props) {\n        super(props);\n        const data = getSampleData();\n        const classificationResults = classifyLatest(data);\n        this.state = {\n            sysBp: classificationResults.sysBp,\n            diaBp: classificationResults.diaBp,\n            classificationResults: classificationResults,\n            date: getToday()\n        }\n    }\n\n    handleClick = (e) => {\n        const newClassification = getClassification(this.state.sysBp, this.state.diaBp);\n        const classificationString = getClassificationString(newClassification);\n        this.setState({\n            classificationResults: classify(this.state.sysBp, this.state.diaBp, this.state.date),\n            classification: classificationString\n        })\n    };\n\n    handleSysBpChange = (e) => {\n        this.setState({sysBp: e.target.value});\n    };\n\n    handleDiaBpChange = (e) => {\n        this.setState({diaBp: e.target.value});\n    };\n\n    render() {\n\n        return <div className=\"hypertension-results-container\">\n            <div className=\"hypertension-input\">\n                <label>Date:</label><input className=\"date-input\" value={this.state.classificationResults.date || this.state.date} readOnly/>\n            </div>\n            <div className=\"hypertension-input\">\n                <label>Systolic Pressure:</label><input className=\"sys-bp-input\" value={this.state.sysBp}\n                                                        onChange={this.handleSysBpChange}/>\n            </div>\n            <div className=\"hypertension-input\">\n                <label>Diastolic Pressure:</label><input className=\"dia-bp-input\" value={this.state.diaBp}\n                                                         onChange={this.handleDiaBpChange}/>\n            </div>\n            <div className=\"hypertension-input\">\n                <label>Classification:</label><p className={`classification-input ${getClassificationHighlight(this.state.classificationResults.classification)}`}>{this.state.classificationResults.classification}</p>\n            </div>\n            <div className=\"hypertension-input\">\n                <textarea className=\"summaray-text-area\" readOnly value={prettyPrint(this.state.classificationResults)}/>\n            </div>\n            <button className=\"hypertension-classify-button\" onClick={this.handleClick}>Classify</button>\n        </div>;\n    }\n\n\n}\n\nexport default HypertensionComponent;","import React, {Component} from 'react';\nimport HeaderComponent from \"../components/HeaderComponent\";\nimport HypertensionComponent from \"../components/HypertensionComponent\";\n\nclass HypertensionScreen extends Component {\n\n    render() {\n        return <div className=\"list-container\">\n            <HeaderComponent/>\n            <HypertensionComponent/>\n        </div>;\n    }\n\n}\n\nexport default HypertensionScreen;\n\n","const getEgfrData = () => {\n    return [\n        {eGFR: 65, atDate: '2018/10/31'},\n        {eGFR: 70, atDate: '2018/10/20'}\n    ];\n};\n\nconst getExtendedEgfrData = () => {\n    return [\n        {eGFR: 110, atDate: '2018/10/20'},\n        {eGFR: 80, atDate: '2018/10/21'},\n        {eGFR: 60, atDate: '2018/10/25'},\n        {eGFR: 45, atDate: '2018/10/31'}\n    ];\n};\n\nexport {getEgfrData, getExtendedEgfrData};\n","import moment from \"moment\";\n\nconst DATE_FORMAT = 'YYYY/MM/DD.';\n\nconst getClassification = (eGFR) => {\n    if (eGFR >= 90) {\n        return \"Normal\";\n    }\n    if (eGFR >= 60) {\n        return \"Mildly Decreased\";\n    }\n    if (eGFR >= 45) {\n        return \"Mild to Moderate\";\n    }\n    if (eGFR >= 30) {\n        return \"Moderate to Severe\";\n    }\n    if (eGFR >= 15) {\n        return \"Severely Decreased\";\n    }\n    return \"Kidney Failure\";\n};\n\n// Calculate if eGFR dropped by 20% or more in 2 consecutive readings\nconst getPercentageChange = (prev, current) => {\n    const dividend = current - prev;\n    const percentageChange = parseFloat(((dividend / prev) * 100).toFixed(2));\n    if (percentageChange === Infinity) {\n        return current > prev ? 100.00 : -100.00;\n    }\n    return percentageChange;\n};\n\nconst sortByDate = (unsorted) => {\n    return unsorted.sort((a, b) => moment(a.atDate, DATE_FORMAT).diff(moment(b.atDate, DATE_FORMAT)));\n};\n\nconst getPercentageChanges = (data) => {\n    const sortedData = sortByDate(data);\n    const percentageDifference = [];\n    sortedData.map((reading, index) => {\n        if (index === 0) {\n            percentageDifference.push(0);\n        } else {\n            const change = getPercentageChange(sortedData[index - 1].eGFR, reading.eGFR);\n            percentageDifference.push(change);\n        }\n    });\n    return percentageDifference;\n};\n\nconst getDataWithPercentageChanged = (data) => {\n    const sortedData = sortByDate(data);\n    const percentageChanges = getPercentageChanges(sortedData);\n    const combined = [];\n\n    sortedData.map((reading, index) => {\n        combined.push({\n            ...reading,\n            percentageChange: percentageChanges[index]\n        })\n    });\n\n    return combined;\n};\n\nconst getDataWithCriticalPercentageChanged = (data, percentage = 20) => {\n    const combinedData = getDataWithPercentageChanged(data);\n    const filteredData = [];\n    combinedData.map((value, index) => {\n        if (index !== 0 && Math.abs(value.percentageChange) > percentage) {\n            filteredData.push({initialReading: combinedData[index - 1], latestReading: value});\n        }\n    });\n\n    return filteredData;\n};\n\nconst getCriticalData = (data) => {\n    const sortedData = sortByDate(data);\n    const first = sortedData[sortedData.length - 1];\n    const classification = getClassification(first.eGFR);\n    const drops = getDataWithCriticalPercentageChanged(sortedData);\n    return {\n        eGFR: first.eGFR,\n        atDate: first.atDate,\n        percentageChange: getPercentageChange(sortedData[sortedData.length - 2].eGFR, first.eGFR),\n        classification: classification,\n        drops: drops\n    }\n};\n\nexport {\n    getClassification,\n    getPercentageChange,\n    sortByDate,\n    getPercentageChanges,\n    getDataWithPercentageChanged,\n    getDataWithCriticalPercentageChanged,\n    getCriticalData\n} ;","import React, {Component} from 'react';\nimport {getExtendedEgfrData} from \"../data/eGFRData\";\nimport {getCriticalData, getPercentageChange, getClassification} from \"../classification/kidneyDisease\";\nimport {getClassificationHighlight, prettyPrint} from \"./uiHelpers\";\n\nclass KidneyDiseaseComponent extends Component {\n\n    state = {};\n\n    constructor(props) {\n        super(props);\n        const data = getExtendedEgfrData();\n        const classificationResults = getCriticalData(data);\n        this.state = {\n            eGFR: classificationResults.eGFR,\n            atDate: classificationResults.atDate,\n            percentageChange: classificationResults.percentageChange,\n            classification: classificationResults.classification,\n            drops: classificationResults.drops,\n            previous: classificationResults.drops[classificationResults.drops.length - 1].initialReading\n        }\n    }\n\n    handleEgfrChange = (e) => {\n        this.setState({eGFR: e.target.value});\n    };\n\n    handlePreviousEgfrChange = (e) => {\n        const newPrevious = {\n            ...this.state.previous,\n            eGFR: e.target.value\n        };\n\n        this.setState({previous: newPrevious});\n    };\n\n\n    handleClick = (e) => {\n        const classification = getClassification(this.state.eGFR);\n        const percentageChange = getPercentageChange(this.state.previous.eGFR, this.state.eGFR);\n\n        this.setState({\n            percentageChange: percentageChange,\n            classification: classification,\n        })\n    };\n\n    render() {\n\n        return <div className=\"kidney-results-container\">\n            <div className=\"kidney-results-inner-container\">\n                <>\n                    <h2>Latest</h2>\n                    <div className=\"kidney-input\">\n                        <label>Date:</label><label className=\"classification\"> {this.state.atDate}</label>\n                    </div>\n                    <div className=\"kidney-input\">\n                        <label>eGFR:</label><input className=\"classification\" value={this.state.eGFR} onChange={this.handleEgfrChange}/>\n                    </div>\n                    <div className=\"kidney-input\">\n                        <label>percentageChange:</label><label\n                        className=\"classification\">{this.state.percentageChange}</label>\n                    </div>\n                    <div className=\"kidney-input\">\n                        <label>classification:</label><label\n                        className={`classification ${getClassificationHighlight(this.state.classification)}`}>{this.state.classification}</label>\n                    </div>\n\n                    <hr className=\"hr\"/>\n\n                    <h2>Previous</h2>\n                    <div className=\"kidney-input\">\n                        <label>Date:</label><label className=\"classification\"> {this.state.previous.atDate}</label>\n                    </div>\n                    <div className=\"kidney-input\">\n\n                        <label>eGFR:</label><input className=\"classification\" value={this.state.previous.eGFR} onChange={this.handlePreviousEgfrChange}/>\n                    </div>\n                    <div className=\"kidney-input\">\n                        <label>percentageChange:</label><label\n                        className=\"classification\">{this.state.previous.percentageChange}</label>\n                    </div>\n                    <button className=\"kidney-classify-button\" onClick={this.handleClick}>Classify</button>\n                </>\n            </div>\n            <div className=\"kidney-results-inner-container\">\n                <h2>All Drops</h2>\n                <textarea className=\"kidney-text-area\" readOnly value={prettyPrint(this.state.drops)}/>\n            </div>\n        </div>;\n    }\n\n}\n\nexport default KidneyDiseaseComponent;","import React, {Component} from 'react';\nimport HeaderComponent from \"../components/HeaderComponent\";\nimport KidneyDiseaseComponent from \"../components/KidneyDiseaseComponent\";\n\nclass KidneyDiseaseScreen extends Component {\n\n    render() {\n        return <div className=\"list-container\">\n            <HeaderComponent/>\n            <KidneyDiseaseComponent/>\n        </div>;\n    }\n\n}\n\nexport default KidneyDiseaseScreen;\n\n","import {createBrowserHistory} from \"history\";\n\nconst HISTORY = createBrowserHistory();\n\nexport default HISTORY;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport HypertensionScreen from \"./screens/HypertensionScreen\";\nimport KidneyDiseaseScreen from \"./screens/KidneyDiseaseScreen\";\nimport {Component} from 'react';\nimport {Route, HashRouter as Router} from 'react-router-dom';\nimport HISTORY  from \"./screens/navigation/history\";\nclass App extends Component {\n\n  render() {\n\n    return (\n          <Router history={HISTORY}>\n            <Route exact={true} path=\"/\"component={HypertensionScreen}/>\n            <Route path=\"/kidney-disease\" component={KidneyDiseaseScreen}/>\n          </Router>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}